# -*- coding: utf-8 -*-
"""saved_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mUileasKTYWmGVHpjOM8JeEQpac8v8sg
"""

import pandas as pd
import numpy as np

df = pd.read_csv("kidney_disease.csv")
df.head(5)

from sklearn.impute import SimpleImputer

mode = SimpleImputer(missing_values = np.nan, strategy = 'most_frequent')

df_imputer  = pd.DataFrame(mode.fit_transform(df))
df_imputer.columns = df.columns

df_imputer['classification'] = df_imputer['classification'].apply(lambda x:'ckd' if x == 'ckd\t' else x)

df_imputer['cad'] = df_imputer['cad'].apply(lambda x:'no' if x == '\tno' else x)

df_imputer['dm'] = df_imputer['dm'].apply(lambda x:'no' if x == '\tno' else x)
df_imputer['dm'] = df_imputer['dm'].apply(lambda x:'yes' if x == '\tyes' else x)
df_imputer['dm'] = df_imputer['dm'].apply(lambda x:'yes' if x == 'yes' else x)

df_imputer['rc'] = df_imputer['rc'].apply(lambda x:'5.2' if x == '\t?' else x)

df_imputer['wc'] = df_imputer['wc'].apply(lambda x:'9800' if x == '\t6200' else x)
df_imputer['wc'] = df_imputer['wc'].apply(lambda x:'9800' if x == '\t8400' else x)
df_imputer['wc'] = df_imputer['wc'].apply(lambda x:'9800' if x == '\t?' else x)

df_imputer['pcv'] = df_imputer['pcv'].apply(lambda x:'41' if x == '\t43' else x)
df_imputer['pcv'] = df_imputer['pcv'].apply(lambda x:'41' if x == '\t?' else x)

df.select_dtypes(exclude = ['object']).columns

for i in df.select_dtypes(exclude = ['object']).columns:
    df_imputer[i] = df_imputer[i].apply(lambda x: float(x))

df_imputer

from sklearn import preprocessing

encode = df_imputer.apply(preprocessing.LabelEncoder().fit_transform)
encode

encode.to_csv('encoded_data.csv', index=False)

x = encode.drop(['id', 'classification'], axis = 1)
y = encode['classification']

from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from collections import Counter

ros = RandomOverSampler()
X_ros, y_ros = ros.fit_resample(x, y)
print(Counter(y_ros))

from sklearn.model_selection import train_test_split

x_train, x_test , y_train, y_test = train_test_split(X_ros, y_ros, test_size = 0.2, random_state = 7)

x_train.head()

x_test

y_train.shape

y_test.shape

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

rf = RandomForestClassifier()
rf.fit(x_train, y_train)
x_train_rf = rf.predict(x_train)
x_test_rf = rf.predict(x_test)
y_pred_rf = rf.predict(x_test)
print("Accuracy Score: %.2f" % accuracy_score(y_test, y_pred_rf))
print("Training Accuracy Score: %.2f" % accuracy_score(x_train_rf, y_train))
print("Testing Accuracy Score: %.2f" % accuracy_score(x_test_rf, y_test))


import joblib

# Save the model to a file
joblib.dump(rf, 'random_forest_model.pkl')
# To load the model later
# rf_loaded = joblib.load('random_forest_model.pkl')

model = joblib.load('random_forest_model.pkl')

predictions = model.predict(x_test)

predictions

print("Testing Accuracy Score: %.2f" % accuracy_score(predictions, y_test))

